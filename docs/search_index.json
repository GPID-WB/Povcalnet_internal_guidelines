[["index.html", "PovcalNet Internal Guidelines and Protocols Welcome Team", " PovcalNet Internal Guidelines and Protocols PovcalNet team Development economics World Bank Group 2020-11-17 Welcome This book contains the guidelines and protocols of the internal workflow of the PovcalNet team. As part of the PovcalNet team, youre required to read and understand the material of this book. The intention of this book is to create institutional memory of the PovcalNet. It is intended for internal audiences but may be used as part of the conversation with other teams inside and outside the World Bank Group. Team PovcalNet is a product of the World Banks Development Economics Division, in particular the Development Data Group and the Development Research Group, and the Poverty and Equity Global Practice. This version of the PovcalNet software was designed by Qinghua Zhao. The global poverty monitoring database is managed by R. Andrés Castañeda, Dean Jolliffe, Christoph Lakner, Espen B. Prydz and Prem Sangraula, with assistance from Tony Fujs and Kihoon Lee. Assembly of these data is undertaken under the auspices of the Global Poverty Working Group which brings together the PovcalNet team and economy- and regional-level counterparts in the World Banks Poverty and Equity Global Practice, and which compiles economy level data and assesses these for international comparability. Overall guidance is provided by Francisco H. G. Ferreira, Senior Advisor in the Poverty and Inequality team of the Research Department, Haishan Fu, Director of the Data Group, and Carolina Sánchez-Páramo, Senior Director of the Poverty and Equity Global Practice. The founder of PovcalNet and former Director of Research, Martin Ravallion, provides continued input on the methodology adopted in PovcalNet. A great many colleagues at the World Bank have helped the team in obtaining the necessary data for PovcalNet. An important acknowledgement goes to the staff of over 100 governmental statistics offices that collected the primary household and price survey data. The Development Data Group has provided the 2011 consumption PPPs, population and other National Accounts data used here. "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction PovcalNet is an interactive computational tool that allows you to replicate the calculations made by the World Banks researchers in estimating the extent of absolute poverty in the world. PovcalNet also allows you to calculate the poverty measures under different assumptions and to assemble the estimates using alternative economy groupings or for any set of individual economies of the users choosing. PovcalNet is self-contained; it has reliable built-in software that quickly does the relevant calculations for you from the built-in database. In March 2019, the World Bank released revised estimates of global poverty from 1981 to 2015 based on 2011 PPPs. The new poverty estimates combine Purchasing Power Parity (PPP) exchange rates for household consumption from the 2011 International Comparison Program with data from more than one thousand five hundred household surveys across 164 economies in the world, including 26 high income economies not included in PovcalNets geographic regions. Over two million randomly sampled households were interviewed for the 2015 estimate, representing 65 percent of the population of the whole world. PovcalNet is the source of, and allows users to replicate, the Banks official global, regional and internationally comparable economy level poverty estimates published in the World Development Indicators and the Poverty and Shared Prosperity report. It also provides crucial inputs to the Poverty and Equity Data Portal. If you would like to duplicate the World Banks regional poverty estimates please click the first button; or go to the second button to form your own group of economies. PovcalNet uses unit-record data whenever possible. For other cases, grouped distributions are used. New survey data become available to us on a continuous basis and these will be added to PovcalNet in regular updates. PovcalNet was developed for the sole purpose of public replication of the World Banks poverty measures for its widely used international poverty lines, including $1.90 a day and $3.20 a day in 2011 PPP. The methods built into PovcalNet are considered reliable for that purpose. However, we cannot be confident that the methods work well for other purposes, including tracing out the entire distribution of income. We would especially warn that estimates of the densities near the bottom and top tails of the distribution could be quite unreliable, and no attempt has been made by the Banks staff to validate the tool for such purposes. "],["folder-strcutures.html", "Chapter 2 Folder Strcutures 2.1 Network Drive 2.2 Remote server connection 2.3 OneDrive 2.4 Additional topics to discuss", " Chapter 2 Folder Strcutures This short note provides everything you need to understand the folder structure of the PovcalNet workflow, which has the following objectives in mind: Store vintages of data for replicability purposes Share documents (i.e, editable files) among the team members through a stable, friendly, and vintage-control suitable platform. Execute, load, and save data uninterruptedly and, if possible, in a fast manner. Unfortunately, the World Bank systems do not provide an ITS service that allows us to meet all the objectives, and thus we are forced to use different platforms. A Network drive for the first objective, OneDrive for the second one, and a server (super computer) of remote execution for the third one. 2.1 Network Drive The Network drive is mainly used to archive data. Currently, it is known as the P drive, but it could be disconnected and remapped by following the steps below. This drive has many folders in its root, but under the new folder structure only three folders would take predominance, 01.Povcalnet, 02.personal, and 03.ProjectX. The latter is not explained in this document 01.povcalnethas four main subfulders and follow the structure below: #&gt; levelName #&gt; 1 P: #&gt; 2 °--01.PovcalNet #&gt; 3 ¦--00.Master #&gt; 4 ¦ ¦--_aux #&gt; 5 ¦ ¦--_vintage_control.xlsx #&gt; 6 ¦ ¦--01.current #&gt; 7 ¦ ¦--02.vintage #&gt; 8 ¦ ¦--03.metadata #&gt; 9 ¦ °--Master.xlsm #&gt; 10 ¦--01.Vintage_control #&gt; 11 ¦ ¦--_aux #&gt; 12 ¦ ¦ ¦--countries #&gt; 13 ¦ ¦ ¦--cpi #&gt; 14 ¦ ¦ ¦--info #&gt; 15 ¦ ¦ ¦--pcn_create #&gt; 16 ¦ ¦ °--price_framework #&gt; 17 ¦ °--AGO #&gt; 18 ¦ ¦--AGO_2000_HBS #&gt; 19 ¦ ¦--AGO_2008_IBEP-MICS #&gt; 20 ¦ °--AGO_2018_IDREA #&gt; 21 ¦--02.Production #&gt; 22 ¦ ¦--_aux #&gt; 23 ¦ ¦--2014_OCT #&gt; 24 ¦ ¦--2015_OCT #&gt; 25 ¦ ¦--2016_OCT #&gt; 26 ¦ ¦--2017_OCT #&gt; 27 ¦ ¦--2018_APR #&gt; 28 ¦ ¦--2018_SEP #&gt; 29 ¦ ¦--2019_MAR #&gt; 30 ¦ ¦--2020_JUL #&gt; 31 ¦ °--2020_SM #&gt; 32 ¦--03.QA #&gt; 33 ¦ ¦--01.GroupData #&gt; 34 ¦ ¦--02.PRIMUS #&gt; 35 ¦ ¦--02.PRIMUS_pending #&gt; 36 ¦ ¦--03.Population #&gt; 37 ¦ ¦--04.NationalAccounts #&gt; 38 ¦ ¦--05.PCN_estimates #&gt; 39 ¦ ¦--06.LIS #&gt; 40 ¦ °--07.historical #&gt; 41 °--04.admin /00.Master contains everything related to the master.xlsx file that is uploaded into the PovcalNet system. This file has its own way for proper use and requires a separate explanation. /01.Vintage_control contains the historical data of PovcalNet. Eventually, this would be folder accessible through datalibweb. /02.Production is the folder with the current version of the data in the PovcalNet system. /03.QA is a working folder that is getting constantly modified. Each subfolder here contains the necessary material to work on particular stages of the PovcalNet process 02.personal contains one folder for each member of the team. The name of the folder is the UPI of the user preceded by the the letters wb. #&gt; levelName #&gt; 1 P: #&gt; 2 °--02.personal #&gt; 3 ¦--_handover #&gt; 4 ¦ ¦--Espen #&gt; 5 ¦ ¦--Prem #&gt; 6 ¦ °--Rebecca #&gt; 7 ¦--wb020687 #&gt; 8 ¦--wb108988 #&gt; 9 ¦--wb372541 #&gt; 10 ¦--wb384996 #&gt; 11 ¦--wb424681 #&gt; 12 ¦--wb463998 #&gt; 13 ¦--wb499754 #&gt; 14 ¦--wb514665 #&gt; 15 ¦--wb537472 #&gt; 16 ¦--wb548542 #&gt; 17 °--wb562318 2.1.1 Steps to map drives In these steps, we disconnect any mapped drive that has previously assigned to letters P or E. Then, we assign to letter P the network drive and to letter E the high-speed drive in the server. Open Notepad. Copy and paste the following lines: net use /del P: /Y net use /del E: /Y net use P: \\\\wbntpcifs\\povcalnet /PERSISTENT:YES net use E: \\\\wbgmsddg001\\PovcalNet /PERSISTENT:YES Save it in your desktop as link_drives.bat Close Notepad Double click file link_drives.bat in your desktop. 2.2 Remote server connection The server is a super computer with 8 processor and 64GB of RAM memory. All the 2.2.1 Steps to connect to the server In order to get access to the remote server, please do the following: Click on Start, type remote, and click on Remote Desktop Connection Type WBGMSDDG001 in the field Computer: and click on show options Make sure the box Always ask for credentials is unchecked Click tab Local Resources and make sure boxes Printers and Clipboard are checked. Then click More Make sure that only boxes (C:)OSDisk and Drives that I plug in later are checked and then click OK. click connect. Enter your username (i.e., wbXXXXXX) and Windows passphrase, where XXXXXX is your UPI number. Once your in the server, enter again your username and Windows passphrase. You need to execute steps 2 to 7 only once. Next time you login into the server you only need to execute steps 1 and 8. 2.2.2 Map Network drive in the server Once youre in the server, open Window Explorer and go to the path E:\\PovcalNet\\02.core_team\\_aux\\ in which you will see a file called link_P_Drive.bat. Double click that file in order to map the PovcalNet network drive in the server. This procedure has to be done only once. After that, the network drive will be always mapped in the server for you. 2.2.3 Folder strcuture in the server. If you already mapped P drive to the server, you will see that you have access to three drives: the C:/ drive, which is the main drive of the server, the P:/ drive, which is our team network drive, and the E:/ drive. You are not supposed to use the C:/ for anything. Some programs like R of Python save their packages or libraries in the C:/, which is fine. But the C:/ drive is not for storing data, MS files, or anything personal. If you need to save something on the C:/ drive, please let leads of the povcalnet team know. The P:/ is fully accessible through the server, so any code pointing to the P:/ drive in your computer will work effortlessly in the server. The P:/ drive is a high speed drive to store big data or large ammount of files to execute fast. This is NOT and storage drive, since its capacity is limited. All your data should be stored in the P:/ and copied to the E:/ drive temporally for fast execution. Once youre done with your analysis, you can copy back any results to the P:/ drive and empty the E:/ to allow others to use it. Ideally, we would increase the size of the E:/ drive but that is not a possibility now. #&gt; levelName #&gt; 1 E: #&gt; 2 ¦--01.personal #&gt; 3 ¦ ¦--wb020687 #&gt; 4 ¦ ¦--wb108988 #&gt; 5 ¦ ¦--wb372541 #&gt; 6 ¦ ¦--wb384996 #&gt; 7 ¦ ¦--wb424681 #&gt; 8 ¦ ¦--wb499754 #&gt; 9 ¦ ¦--wb537472 #&gt; 10 ¦ ¦--wb548542 #&gt; 11 ¦ ¦--wb561460 #&gt; 12 ¦ ¦--wb562318 #&gt; 13 ¦ °--wb562350 #&gt; 14 ¦--02.core_team #&gt; 15 ¦ ¦--_aux #&gt; 16 ¦ ¦--01.admin #&gt; 17 ¦ ¦--02.code #&gt; 18 ¦ ¦--03.data #&gt; 19 ¦ ¦--04.dashboard #&gt; 20 ¦ ¦--05.writeups #&gt; 21 ¦ °--06.PPT #&gt; 22 ¦--03.pcn_update #&gt; 23 ¦ ¦--00.Master #&gt; 24 ¦ ¦--01.QA #&gt; 25 ¦ ¦--02.Vintage_control #&gt; 26 ¦ °--03.Production #&gt; 27 ¦--04.projects #&gt; 28 ¦--05.CPI #&gt; 29 ¦--06.National_accounts #&gt; 30 °--07.ProjectX In the subfolder E:/01.personal you may place all the date files you need for highspeed performance. For some particular projects, you will be asked to place the folders in the folder E:/02.core_team. 2.3 OneDrive OneDrive has a double storage functionality. On the one hand, each person has been granted with 5TB of memory in a personal folder that is accessible through either the web browser or through the Window Explorer. On the other hand, OneDrive offers shared libraries for collaboration among the members of a private team. The PovcalNet team currently has assigned the library called PovcalNet Data, Systems and Management and it is accessible either through the web browser or through the Microsoft Teams app. In general, the shared library in OneDrive works in the same way as the personal OneDrive folder with the exception that MS Teams automatically creates a folder in the root of the library for each new channel that is added to team. Besides this inconvenience, the suggested folder structure is as follows #&gt; levelName #&gt; 1 wbntpcifs #&gt; 2 °--PovcalNet #&gt; 3 °--TestFolder #&gt; 4 ¦--01.admin #&gt; 5 ¦ ¦--01.Recruitment #&gt; 6 ¦ ¦--02.Funding #&gt; 7 ¦ °--03.Concept_note #&gt; 8 ¦--02.core_team #&gt; 9 ¦ ¦--01.code #&gt; 10 ¦ ¦ ¦--01.packages #&gt; 11 ¦ ¦ ¦ ¦--01.Stata #&gt; 12 ¦ ¦ ¦ ¦--02.R #&gt; 13 ¦ ¦ ¦ ¦--03.Python #&gt; 14 ¦ ¦ ¦ °--04.VB #&gt; 15 ¦ ¦ °--02.routines #&gt; 16 ¦ ¦--02.dashboard #&gt; 17 ¦ ¦--03.PPT #&gt; 18 ¦ °--04.Minutes #&gt; 19 °--03.projects #&gt; 20 ¦--01.Metadata #&gt; 21 ¦ ¦--01.CPI #&gt; 22 ¦ ¦--02.PPP #&gt; 23 ¦ ¦--03.National_accounts #&gt; 24 ¦ °--04.Population #&gt; 25 ¦--02.Nowcasting_error #&gt; 26 ¦ ¦--_aux #&gt; 27 ¦ ¦--01.Data #&gt; 28 ¦ ¦--02.Code #&gt; 29 ¦ ¦--03.Results #&gt; 30 ¦ ¦--04.Writeup #&gt; 31 ¦ °--05.Literature #&gt; 32 ¦--03.The_Real_Value_of_Poverty #&gt; 33 ¦ ¦--_aux #&gt; 34 ¦ ¦--01.Data #&gt; 35 ¦ ¦--02.Code #&gt; 36 ¦ ¦--03.Results #&gt; 37 ¦ ¦--04.Writeup #&gt; 38 ¦ °--05.Literature #&gt; 39 ¦--04.Whats_New_notes #&gt; 40 ¦ ¦--_aux #&gt; 41 ¦ ¦--01.Data #&gt; 42 ¦ ¦--02.Code #&gt; 43 ¦ ¦--03.Results #&gt; 44 ¦ ¦--04.Writeup #&gt; 45 ¦ °--05.Literature #&gt; 46 °--05.Project_X #&gt; 47 ¦--_aux #&gt; 48 ¦--01.Data #&gt; 49 ¦--02.Code #&gt; 50 ¦--03.Results #&gt; 51 ¦--04.Writeup #&gt; 52 °--05.Literature In general, the folder structure is divided by topics according to their functionality. 01.admin, 02.core_team, and 03.projects. Notice that up to the third level in the folder structure, all folders are prefixed with two-digit numbers. This system guarantees that folders will be sorted as they are added and it is useful for navigation when using the keyboard. Also notice that there are no blank spaces in folders names, but rather underscores (_) are used when the name of the folder has two or more words. This is to avoid problems with some systems. 01.admin This folder contains everything related to administrative information. Each subfolder corresponds to a big subtopic such as recruitment, funding, or concept notes. 02.core_team This folder contains information that is common and useful to all the members of the team and intersects two or more functions (or projects). For instance, the Stata and R packages to query the PovcalNet API might be used in many different projects and do not belong to any project besides the production of the packages itself. Thus, four main categories of common information have been added: code, dashboard, PPT, and minutes. 03.projects This folder contains all the analytic projects in which the PovcalNet team participates. By default, each project contains six subfolders, /01.data, /02.Code, /03.results, /04.writeup,/05.Literature, and /_aux, but these structure could be modified by following any of the following examples: example1, example2, or my favorite. 2.4 Additional topics to discuss 2.4.1 R or Stata or both? 2.4.2 GitHub ss "],["collaboration-in-git.html", "Chapter 3 Collaboration in Git 3.1 Initial Set up 3.2 Getting to know Git 3.3 Basics of Git 3.4 Getting to know SmartGit 3.5 Advanced Git process 3.6 Getting to know GitKraken", " Chapter 3 Collaboration in Git This chapter presents how to work with Git, GitKraken, and GitHub. In general, Git is a version control system to track changes in text file (e.g., do-files, R scripts, csv, etc) and to share those changes with other people. Git is capable of letting you know whether a binary files (e.g., Word, Excel, PDF, DTA, etc.) has changed, but it wont tell how it changed. To get the most out of Git, programmers combine it with GitHub, which is a website that to share code with anybody (including people outside the World Bank), solicit improvements via pull requests, and track issues. 3.1 Initial Set up Make sure you follow the steps below: Open a GitHub account using your World Bank email account. Here or here. Download SmartGit and install it (see below). Install GIT (Optional). This step is optional because the two steps above suffice for working with Git. However, if you get into Git and want to do really advance stuff, you need to work with GIT directly. Make sure R and RStudio are installed and updated in your computer. Even though we have not decided whether or not to work with R from now on, Rstudio is great IDE that allows us to do a lot of things including GIT management . 3.2 Getting to know Git Git is a Distributed Version Control System. This means that Git is a system to fully clones the project and in its history into any clients repository or local computer. Every time you save the state of your project (i.e., commit), Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesnât store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots of the whole project. This ability of taking snapshots of the projects is what makes Git to any other version control system. Other systems, like Microsoft Word or any other MS software, changes are tracked at the file level rather than at the project level. People is able to know how files have changes individually, but they dont know how those files change with respect to the changes applied to other files of the same project. 3.3 Basics of Git 3.3.1 Working with repositories blah 3.3.2 Branching and Merging Branching and merging are the core of collaborating with multiple people. Branches are used to develop features isolated from each other. The master branch is the default branch when you create a repository. Use other branches for development and merge them back to the master branch upon completion. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bugâno matter how big or how smallâyou spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your futures history before merging it into the main branch.\"1 3.4 Getting to know SmartGit Installation Download SmartGit and install it. Download the files into the the folder that youll use for installation and NOT into the downloads folder. If SmartGit automatically downloads the zip file into the downloads folder, then extract it into the folder youll install it in. You dont need admin permissions to install it, but download the Portable Bundle. The installation files can be found here: SmartGit &gt; bin &gt; smartgit.exe. Note: (1) During the installation process pick the non-commercial use option; (2) Integration with GitHub might be easier if you use the same username and email as that of your GitHub account. Integration with GitHub Once SmartGit is installed, do the following to integrate your GitHub account: Go to Edit &gt; Preferences &gt; Hosting Providers. Click the Add button on the top-right of the window. There are a few ways to integrate. The easiest is to pick the Use OAuth token for repository authentication (instead of password) option. This should generate a token in your web browser. Use this token to complete the integration. Once the GitHub account is added, your GitHub account should be listed in Hosting Providers window in SmartGit. You can also check your GitHub account to make sure that SmartGit has been authorized. To see this, in your GitHub account, go to settings &gt; applications. You should see SmartGit listed under Authorized Apps. You can find the instructions on integration here. Organize your toolbar You can add convenient commands to your toolbar from the Edit&gt; Customize &gt; Toolbar menu. Figure 3.1: Toolbar Figure 3.2: Customize menu Figure 3.3: Add/delete commands Initialize Repos Go to Repository &gt; Add or Create Repository. Select a folder that you created and saved in your computer (e.g., new_repo). Select Initialize. Clone Repos Go to Repository &gt; Clone. Get and insert URL of Git repository you want to clone (e.g., https://github.com/PovcalNet-Team/Povcalnet_internal_guidelines.git). You could also select from a list of repositories in your GitHub account. Use these steps: Click on the drop-down arrow and select github.com from the drop-down menu. Select the repository you want to clone from the list of repositories in your GitHub account. Specify the local directory for the new repository. Organize Repos by groups Have some repositories that you can put into groups (e.g., GitHub, R, SmartGit, Stata). Go to Repository &gt; Add Group Enter the group name (e.g., Version Control for GitHub and SmartGit). Drag and drop repositories into the relevant group. How do you link a repository that is your local machine to your GitHub account? Set up a new repository in GitHub. Enter name of repository, select Public or Private, and do NOT select Initialize. NB: Steps (1) and (2) should be done in GitHub, and the next steps should be done in SmartGit. Go to Repository &gt; Add or Create Select a folder saved in your machine (e.g., dofiles_for_github). Select Initialize. Go to Local &gt; Stage. Select Stage. Go to Local &gt; Commit. Enter a commit message and hit Commit. Go to Remote &gt; Add. Select the new GitHub repository that you created in Step 1. Add the remote repository. Select master branch and origin. Right-click repository you want to push to GitHub, and select Push. Check if you have the repository on GitHub. Basic Git process - Stage Use to prepare a commit. This command saves your files content from the working tree to the index. Figure 3.4: Stage command - Commit This command saves local changes to your local repository. Each commit is accompanied by a commit message. It is good practice to commit your changes often in order to save them in the repository. Figure 3.5: Commit command - Push This command saves local commits to a remote repository hosted in the cloud, e.g. in Github. This is the key step for your work to be always backed-up in the cloud and accessible to other members in the team. Figure 3.6: Push command - How to stage commit and push First, let us take a look at the SmartGit interface. Figure 3.7: SmartGit Interface Now, let us see how to stage and commit a .do file. Figure 3.8: Stage and commit a .do file We can also stage and commit binary files (e.g. MS office files). However, Git will not track changes. This video also shows how to push your files to the host. Figure 3.9: Stage, commit and push a file - Pull This command fetches commits from a remote repository and includes them into your local branch. You can pull from the remote repository clicking on the pull icon and selecting Pull in the window that appears on your screen: Figure 3.10: Pull icon Figure 3.11: Pull or fetch only Once you click on pull you should see a confirmation of a successful pull (unless there is a conflict, more on this later on). Figure 3.12: Successful (rebase) pull - Create a new branch Branching is a crucial step in collaborating with others in Git. You start a new branch to store your work independently from the master tree. Remember that in Smartgit you need to double click on your local branch to check-out: this simply means that you are making the selected branch your local one. You can see the steps to create and check-out your new branch below. We start from the simplest example. We cloned a repository with only the master branch (see in the Branches window): Figure 3.13: Master Branch We now click on the icon: Figure 3.14: New Branch command SmartGit will ask you to give a name to your branch, in this case MartaS (Notice that it can actually be more efficient to name your branch after the task you are performing, e.g. adding section 3, rather than the name of the author as the same author might be working on more than a task) and click on Add branch: Figure 3.15: Add new branch Remember we want to make sure that we are working on the MartaS branch (Working on the master branch might cause a lot of disruption especially if many people are starting their own branches from the master. Be careful!). Double click on the MartaS branch in the Branches window and this message will appear: Figure 3.16: Checkout a Branch After you click on checkout the MartaS branch will change to bold characters in the Branches window. You are all set and can start working on your task! Figure 3.17: Local Branch changed from master to MartaS All commits will be now saved to the branch MartaS and can be incorporated in the master branch after the person in charge of the repository resolves possible conflicts and decides to merge. More on this below. Important keyboard shortcut process Nice features of SmartGit 3.5 Advanced Git process 3.5.1 Git workflow When working with Git it is important to be aware of the different steps of the Git workflow. The four different environments you can work with are 1) your workspace, 2) the staging environment (also know as the Git Index), 3) your local repository and 4) your remote repository (typically on the Github). An overview of common Git commands and the typical Git workflow can be found in the picture below.2 Note that the commands shown here are the actual Git command line commands.3 The name of some these commands will be slightly different when you are using them in a GUI, like RStudio, GitKraken or SmartGit. But the workflow and process will be the same. 3.5.2 How to work with commits - Commit best practices One of the most important habits when working with projects in Git is to commit often and early. The reason for this is at a commit should only contain changes related to a single problem. If you discover a new problem, you should do a separate commit. This is much easier to achieve if you start out by committing changes early on in the project. It is of course also important that the commit solves the problem that it claims to solve, so doing an extra code check before you commit is a good idea. - Stage vs Commit Staging is a necessary pre-step before committing a change to your local repository. It does not however affect your repository in any significant way, and does not change your Git history. A staged file can be easily unstaged to remove it from your Git index. A commit on the other hand saves changes to your local repository. This does affect your Git history. A commit can be reverted, but it is not as easy as unstaging a file. The general rule is to commit often, but make sure your code works before you commit. - Writing commit messages A good commit message should be concise, but also add the details necessary for people to understand what the commit does. This is particularly important when working on a shared project (but it could also be important for your future self!). Anybody should be able to look at your commit message and get an instant sense of why the commit was implemented. It is important to start your commit message with a short one line summary of maximum 50 characters. This should preferably be written in the imperative. An example on how to structure a good commit message is given below (taken from this blog post).4 An example of a good commit messages structure: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like log, shortlog and rebase can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Heres the place to explain them. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 - Amend a commit You can amend a previous commit if needed, for example if you made a significant typo and want to correct it or if you want to add a more detailed explanation to your commit message. You can also use amend to add more changes to a previous commit, but depending on how large those changes are you could also consider just adding a new commit. Note: It is important to not amend commits that you have already pushed to a shared repository. 3.5.3 What to do with changes you dont want to commit - Discard If you dont need your uncommitted changes and want to throw them away you can use Discard to do this. In SmartGit this can be done by clicking the below icon. - Stash If have some uncommitted changes that you dont want to commit, but still want to save them for later use you can use the Stash option. The two commands for this in SmartGit are Save Stash and Apply Stash, shown with the icons below. You can think of this as putting your changes in a box (with Save Stash) and then opening this box later if you need to (with Apply Stash). 3.5.4 How to undo stuff in the Git - Unstage This easiest undo operation in Git is to unstage a file you have previously staged (prepared for commit). This is useful if you realize that the file needs some more work before solving the problem or adding the feature you are working on. Remember that it is always a good idea to check that your code is working before committing to your local branch. If you find an error at this step of the workflow just unstage the file. In SmartGit this can be done by clicking the below icon. Note however that unstaging will not help you if the commit has already been made. - Reset Reset is one of the options available if you want to undo changes in Git. It can be used to either reset files in your staging index (this is the same as unstage) or resetting commits in your local repository. Reset can however be a complex tool to use. There are important differences between doing a soft, mixed or hard reset. Particularly a hard reset can be dangerous since it involves resetting your staging environment and working directory to specific commit (a point in time on your Git history tree). This implies that any pending work in your index and working directory will be lost. It therefore important to be careful when using Git reset on your commit history, and to read up on the different options before doing so.5 It is very important to never use Git reset on a commit that has been published to a shared repository. When a commit has been pushed to a shared repository you should always assume that your colleagues relies upon this change. If a commit is removed from the projects shared history this can create serious and unexpected problems when syncing different branches. Therefore; If you find yourself in a situation where you want to undo a commit that has been pushed to a shared repository you should always use Git revert, not reset. In general revert can be seen as a safer option (see below). - Revert Revert is another option for undoing changes in Git, although it is not a traditional undo operation. A Git revert inverts the changes introduced by a commit and appends a new commit with the resulting inverse content, as illustrated by the figure above. This is what makes the revert operation safer than a Git reset. By adding a new commit revert ensures that all the projects history is kept in place. This is also why Git revert should always be the preferred option when reverting a commit that has been shared with others. As mentioned above you should never modify or delete published Git history, something which Git revert nicely avoids. An other important difference between revert and reset is that revert is able to target an individual commit at an arbitrary point in the history, whereas reset can only work backward from the current commit.6 You can use the following button in SmartGit to initialize a revert process. 3.5.5 How to deal with merge conflicts - What is a merge conflict Conflicts are usual, and you should not worry if you encounter one. Conflicts regularly arise when the same file was changed in the same line, customarily by two different collaborators. Given a conflict git is unsure of which version is the correct one, and is up to the person carrying the merge to select it. Notice that the solution can be a particular version of a file or a combination of the conflicting versions. The collaborator caring out the merge is responsible for solving the conflicts. - Solve merge conflicts Thanks to git UIs as SmartGit or GitKraken solving merge conflicts is easy. When caring a merge using one of this UIs, if a conflict appears the process will be paused and youll get notified that the file has a conflict. These UIs have a conflict solver, that will show you both versions of the file allowing you to either select the one to keep or to select line by line what to keep of each one, solving the conflict. In case you need so you may also stop the whole process. The same can be done using Git command lines, although not covered here, If youre interested you can find more on this here. - How to avoid merge conflicts Some general workflow advice on how to avoid merge conflicts is to always have a separate branch for each issue, only one author per branch and also to create a pull request with a reviewer before the branch is merged to master. 3.5.6 How to work with pull requests Working with Git is meant to be a collaborative experience, both dynamic and efficient. Pull requests are a powerful and crucial tool in such aspect. Pull request can be thought as embed way to let know others about changes you have pushed in a repositorys branch. Once a pull request is opened, the chance to engage a discussion about the changes pushed takes place; where collaborators are welcome to share thoughts, concerns and ideas before the changes are merged. In the case you expect input from a particular collaborator you may add a designated reviewer; in many occasions, the reviewer is also the person in charge of the destination branch and will be the person that will ultimately carry the merge. This is how a pull request looks in Github: Notice that this contains a title and a message clearly stating the nature of the request/feature. Moreover in this case a reviewer is designated: The reviewer evaluates the changes approves them and merge the new features to the master branch, in this case. Also remark that a fluid conversation between reviewer and the collaborator arises. - Creating a pull request from SmartGit Figure 3.18: Pull request in SmartGit - Issues Similar to pull request issues is a powerful collaborative tool of Github. An issue works both as a way to assign people to tasks and a forum where people can discuss them. An issue must have a title and description of the topic to tackle, and usually has labels to help to categorize it, at least one assignee in charge of working on it, and a comment section where the team members can interact. An issue looks something like this: 3.5.7 DOs and DONTs Dos: Do commit early and often Do check that your code works before you commit Do write informative commit messages Do create a new branch before you start working on a new issue Do create a pull request before merging your branch to master Do add a reviewer to your pull request Do delete branches when the issue has been solved (i.e. branch has been merged to master) Do keep up to date (take note of other changes in the repo, e.g. use pull rebase) Donts: Dont work directly on the master branch Dont create a pull request addressing multiple issues Dont add binary (or other large files) to the repository Dont commit files that contain usernames, passwords or other credentials Dont modify or delete the published Git history Dont do a force push (unless absolutely sure about what you are doing) Dont panic :) 3.6 Getting to know GitKraken Even though Git was originally thought to be executed at the command line, there are several GUIs that ease your interaction with Git and get you excited about it. Yet, keep in mind that most of the GUIs implement only a partial subset of Git functionality for simplicity. If you know how to run the command-line version, you can probably also figure out how to run the GUI version, while the opposite is not necessarily true. Also, while your choice of graphical client is a matter of personal taste, all users will have the command-line tools installed and available.7 Among the GUIs available, we thinkg GitKraken is the best one to get you started. However, if youre interested on learning Git at the command line, we recommend the book Pro Git by Scott Chacon and Ben Straub, which is available online for free. The best place to learn everything about GitKraken is the GitKraken Support webpage. However, bellow you will find the most basic things that you need to know about it and, when considered necessary, you will find either reference links for more detailed information or embedded videos. For instance, the video bellow shows the basics of GitKraken. Figure 3.19: Introduction to GitKraken GItKraken Interface Figure 3.20: GitKraken Interface Figure 3.20 presents the GItKraken interface, which has four main components. The Toolbar shows the most common actions in repositories. In our case, we will focus on pull, push, and branch. The Left reference panel shows properties of your repository. In this panel you can see what branches are stored in your local computer and which in the cloud (i.e., remote repository). You may use it also to know whether youre ahead or behind any specific branch. The Commit panel at your right is where files and changes from your working directory are being watched (i.e., tracked). In this panel you may can see whether a particular file has been modified (orange), deleted (red), created (green) or renamed (blue) with respect to the previous commit. Also, you can see the state of your files with in your current commit. That is, you may know whether each file is staged or untagged. Figure 3.21: color guide for file symbols The commit graph is the core of your repositorys development and a representation of the Directed Acyclic Graph. As explained in the GitKraken documentation, [e]ach row of the graph represents one commit, and the top is always for the latest changes. An interactive //WIP (Work-In-Progress) node will show if the working directory has changed since the last commit. Branches and tag labels on the left side of the graph are pointers to specific commits, and each vertical column represents a branch currently available on the repository. Columns can intersect through merge commits as shown in the graph legend. As also shown, multiple branches can be at the same place of a single commit and can be both local and remote. Figure 3.22: Nodes meaning Create a repository In Git, a repository refers to a folder with all the files and sub-folders of a project. In other words, it refers to the folder of a project. It is possible to create a git repository in an existing project folder, but it is recommended to initialize a Git repository before you start working on your project. Open GitKraken and click on the folder icon at the upper-left side of the screen and then click Init. Alternatively, you could go to file -&gt; Init repo, or use the shortcut Ctrl + I. Given that we are going to be working with GitHub, click on the icon GitHub.com. Select your account in case you have more than one GitHub account. Provide a name for your repository. The name cannot have spaces. If you want, add a description of the project. Select Public or Private repository. Keep in mind that if you have a free GitHub account: You can have unlimited public repositories with unlimited collaborators. You can have unlimited private repositories with no more than three collaborators. This is very inconvinient for large teams like PovcalNet. Check the box Clone after init Select the folder in your computer where you want to clone the repository. Make you do NOT create a folder for the repository because Git will created for you using the name provided in step 2.2. You only need provide the root folder. Do not do anything on the field Full Path. It is just for your information. Do not select anything on .gitignore yet. We will cover that below. If you are creating a package or a document that must be cited if used, select MIT license leave unchecked the box initialize with LFS Your screen should look something like this: Figure 3.23: Initialize repo Once you have create your repository, make sure to open it and initialize it. Clone a repository If you want to contribute in an existing repository, you can do it as an existing collaborator or as an external user. If youre an existing collaborator, you can create branches, commit and push your work into the main repository. If the repository is hosted in a free Github account, you are even able to merge your branch into the master branch. However, if the repository is paid (PRO) license in GitHub, the owner of the account may set restrictions to collaborators and branches. In the second case, if you are an external user of the repository, you cant push your work into the original repository but you can fork it (which is making a copy of the repository into your account), modify it as you consider necessary and make a pull request. In order to contribute into any of the PovcalNet repositories you must be an existing collaborator. Thus, in this section you will learn how to clone a repository. Go the to the repository you want clone in GitHub. Clik on the green button Clone or download and copy the whole url. Figure 3.24: GitHub link to clone repo Go to GitKraken and click on the folder icon at the upper-left side of the screen and then click clone. Alternatively, you coul go to file -&gt; Clone repo, or use the shortcut Ctrl + N. Select the Github.com icon Select the folder where the repository is going to be cloned Select the repository from the menu. Figure 3.25: Clone repo in GitKraken Working with commits A commit is a snapshot of your project but, as you work on it, youre able to decide how the snapshot would look like. You can select what parts or files of your progress will be committed (or snapshotted) and even select what file are not going to be tracked in your progress. All of this is done as follows: Once your files have been modified (Fig. 3.22) and saved, GitKraken identifies them as work in progress (//WIP) and shows you the details in the Unstaged file box. Figure 3.26: GitKraken Work In Progress By clinking in the name of any file in the commit panel (Fig. (fig:GKinterface)), the commit graph will be replace by the GitKraken diffs interface which shows what was added or removed from a file. Red is for lines where content was removed whereas green is for new lines added. You can select [1] all the files, [2] some of the files, or [3] even some hunks within each file to be stage. Your select will compose the next commit. If you decide you dont want make a staged file part of your next commit, you can unstage it. Record your commit message for the staged files to the repository. In Summary you include a brief but meaningful message supporting your commit. This text will appear in the graph and is mandatory. In Description you may add extended message to provide more details behind the changes. Click Commit changes You may repeat this process as many times you want. When youre ready, you may push your work to the remote repository into your own branch. Atlassian, Git Branch | Atlassian Git Tutorial Atlassian, accessed June 3, 2019, link. Nikolas Begetis (2018). Git: How to start code changes, commit and push changes when working in a team, accessed June 16, 2020, link. Atlassian, Basic Git commands, accessed June 22, 2020, link Chris Beams (2014). How to Write a Git Commit Message, accessed June 16, 2020, link. Atlassian, Git Reset | Atlassian Git Tutorial Atlassian, accessed June 16, 2020, link. Atlassian, Git Revert | Atlassian Git Tutorial Atlassian, accessed June 16, 2020, link. Even though there are only three types of grouped data, they are labeled type 1, type 2, and type5 "],["DMGroupData.html", "Chapter 4 Upload Group Data to the Data Management System 4.1 Group Data 4.2 Master File 4.3 Making sure everything works", " Chapter 4 Upload Group Data to the Data Management System Server: http://wbgmsrech001/povcalnet/DB_Management.aspx Given that anyone may have access to the Data Base Management Syste, the username and password are not provided in this document. 4.1 Group Data 4.1.1 Preparing the data Once the Group Data is received from the regional focal point of the Poverty GP, It has to be copied and pasted into a text file. Two columns of data must be pasted into the text file; one for weight and one for welfare, which may come in three different varieties and are clearly explain the Povcalnet Website. For the case of China 2016, which is the database used as example in this text, data comes in type 5 format,8 which means that the weight variable is the share of the population in a given quantile and the welfare variable is the mean of welfare therein. If the data comes broken down by urban and rural population, it is necessary to create one text file for each distribution. 4.1.2 Naming convention Text files must be saved with the following naming convention, CCCgXX.T0F, where the only literal piece of the naming convention is T0. All the other are as follows: CCC refers to the country code. However, the name of the country has been used in the past. g refers to the geographic area: r for rural, u for urban, and n for national XX stands for the last two digits of the corresponding year of the survey. For example, if the year is 2016, then XX would be 16. F refers to the type formatting of the data. In the case of China 2016 it would be 5. Make sure the text does not have the extension txt. In software used to save the text file includes the extension txt by default, make sure to remove it manually. So, the final name for rural China 2016 would be CHNr16.T05 4.1.3 Upload the data. After logging into the server, the new group data must be uploaded by clicking on choose Files, next to the Data file(s) legend, and choosing the corresponding file from the files explorer. Finally, you have to click on Upload data file(s) at the very right of the page. This process has to be done file by file. Apparently, before the last update of the system, it was possible to upload several files at the same time. Figure 4.1: Upload files 4.2 Master File 4.2.1 Preparing the Master File The following sheets must be modified in the master file (p:/01.PovcalNet/00.Master/Master.xlsm): MasterMean: Add one row with the corresponding information of each group data file uploaded. Make sure columns CountryCode and SurveyTime get updated. Finally, make sure to include the mean of each distribution in the SurveyMean_LCU column. If the mean is not provided, the PovcalNet system does not work. SurveyInfo: Add a row for each country/year data point rather than for urban/rural breakdown. The information in this sheet goes directly into the Info page of each country in the PovcalNet server. CPI: Make sure there is CPI information for the year of the survey. 4.2.2 Upload Master file Once the master file has been updated using the Master file tool, you may proceed to upload the latest version of the master file by selecting the most recent file in the folder p:/01.PovcalNet/00.Master/02.vintage. Then, click on Choose file next to the Metadata file legend. Once the file has chosen, you may click on Upload metadata and then on Reload metadata. Figure 4.2: Upload files 4.3 Making sure everything works Once the new data and the updated metadata are uploaded, you may proceed to click one by one of the buttons shown in Figure 4.3. Make sure, The box Re-make all dataset remain should be checked. Do NOT click on Clean up data files. (Not shown in Figure 4.3) Figure 4.3: Upload files Finally, click on Rebuild listed Economy docs (which needs to be done only once, in case of uploading several times the master file) and then click on Restart PovcalNet. Even though there are only three types of grouped data, they are labeled type 1, type 2, and type5 "],["prepare.html", "Chapter 5 Prepare data for PovcalNet update 5.1 Population 5.2 GDP and Consumption 5.3 PPP 5.4 CPI 5.5 National accounts for special countries", " Chapter 5 Prepare data for PovcalNet update In this section we briefly describe what needs to be done with each auxiliary file to update PovcalNet 5.1 Population 5.1.1 Raw data Everything related population data should be placed in the folder p:/01.PovcalNet/03.QA/03.Population, hereafter (./). Population data is saved in the folder ./data. The data is may come from two different sources, WDI or from an internal source in DECDG. Right now, the data is build and shared by Emi Suzuki &lt;esuzuki1@worldbank.org&gt; in an Excel file. The file shared by Emi should be placed without modification in the folder ./data/original. Then, the file is copied again into the folder ./data with the name population_country_yyyy-mm-dd.xlsx where yyyy-mm-dd refers to the official release date of the population data. 5.1.2 update master file Once the new raw population data is in the folder ./data it is necessary to update the population sheet in the master file. This can be done by just type, pcn master, update(population) Finally, you can check the differences between the two versions by using the following code, pcn master, load(Population) rename population pop2 tempfile pop2 save `pop2&#39; // the version to compare with must change depending on the vintage available pcn master, load(Population) version(20200529073145) rename population pop1 merge 1:1 countrycode coveragetype year using `pop2&#39; tab year if _merge == 2 tab countryname if _merge == 2 &amp; year &lt; 2019 gen diffpop = pop1 - pop2 sum diffpop br if abs(diffpop) &gt; `r(mean)&#39;*2*`r(sd)&#39; &amp; diffpop != . 5.2 GDP and Consumption blah blah 5.3 PPP blah blah 5.4 CPI blah blah 5.5 National accounts for special countries 1.Get the latest national accounts file from P:/01.PovcalNet/03.QA/04.NationalAccounts/data. 2.Get the relevant data from the latest versions of the World Development Indicators (WDI) and World Economic Outlook (WEO). The WDI series for PCE is NE.CON.PRVT.PC.KD and the WDI series for GDP is NY.GDP.PCAP.KD. The WEO series for GDP is NGDPRPC. If NGDPRPC is not available, use the growth rate provided in NGDPRPPPPCPCH to splice on the series. Below you will find the descriptions of the series. (If the series change in future versions, you can choose related series with advice from R.Andrés Castañeda or Christoph Lakner.) NE.CON.PRVT.PC.KD: Household final consumption expenditure per capita (constant 2010 US$). NY.GDP.PCAP.KD: GDP per capita is gross domestic product divided by midyear population. Data are in constant 2010 U.S. dollars. NGDPRPC: Gross domestic product per capita, constant prices. GDP is expressed in constant national currency per person. Data are derived by dividing constant price GDP by total population.* NGDPRPPPPCPCH: Gross domestic product per capita, constant prices (purchasing power parity; percent change). Data are derived by dividing constant price purchasing-power parity (PPP) GDP by total population. 3.Update the non-missing observations in the PCE and GDP series. Make sure there is no observation where both PCE and GDP are missing. 4.In the Excel file for the national accounts, you will find the source of data and clues on how best to update each observation. Unless otherwise instructed by R.Andrés Castañeda or Christoph Lakner, use the source in the latest version of the national accounts to update the relevant observations. 5.For India, update the latest Excel file with pass-through calculations, which can be found at **P:/01.PovcalNet/03.QA/04.NationalAccounts/data/_aux**. Follow instructions in the Excel file and Daniel Mahler to update rural and urban PCE. "],["referencing-software-zotero.html", "Chapter 6 Referencing software: Zotero 6.1 Installation 6.2 Extensions and add-ons 6.3 Adding references to Zotero", " Chapter 6 Referencing software: Zotero This chapter presents how to work with Zotero as a referencing software to be used in documents relevant for the Povcalnet team. The goal of using this software is to be able to collaborate on libraries that can be used in different documents by team members. Zotero is a free source referencing software with many convenient feature and that can be used within Word documents. 6.1 Installation The first step is to open your browser and download Zotero Here. Once you click on download, you will double click on the Zotero.exe file and still wil start the installation. You will be asked to give admin credentials as the installation process starts. Notice that, after you have put in your credentials the pop-up window will give you a red message reading: This software requires elevation. However, once you click on Cancel you will see that the installation can continue even without providing admin credentials, you will see this screen: Figure 6.1: Click on Next Click on next and follow the instructions for installation. Once the installation is complete you will be asked to Open Zotero. This is how the main screen looks like. Figure 6.2: Zotero 6.2 Extensions and add-ons Chrome Connector Before we proceed with how to use Zotero, we need to install additional features that can make our life easier. One nice feature is that Zotero can save your references directly from your browser and import them to your library. This is how you install the browser connector. When you visited the download page, you saw that you can add the Chrome Zotero Connetor Here. The Chrome Connector will automatically sense content as you browse the web and allow you to save it to Zotero with a single click. You can also download the connectors for other browsers following the link highlighted in the figure below. Click on install Chrome Connector Figure 6.3: Install Chrome connector You will be sent to this page, where you should click on Add to Chrome: Figure 6.4: Add Chrome extension Once you open a new tab/window in Chrome you will see the Zotero extension as a Z in the top right corner of the taskbar: Figure 6.5: Zotero extension in Chrome homepage Word Add-ons Another nice feature is that Zotero can be used within Word documents. This means that you can add your references and bibliography using two easy to install add-ons. Here is how to install them. First, you open Zotero on you computer and click on Tools-&gt; Add-ons: Figure 6.6: Word Add-ons In the Add-ons Manager window you will see two add-ons: Zotero LibreOffice Integration and Zotero Word for Windows. Both need to be enabled (this might require for you to contact IT to request admin credentials). Figure 6.7: Add-ons Manager Once the add-ons are installed you will be able to see a Zotero menu in your Word document: Figure 6.8: Zotero menu in Word 6.3 Adding references to Zotero The next step is to see how to organize references in Zotero and add them. First lets take a look at how Zotero home screen is organized. On the top left-hand side corner you can see how your library is organized. Each Collection is a subset of the library and can be managed based on your preferences, in this case each project has a collection. Figure 6.9: Zotero Home Page You can add a new collection using the New collection icon: Figure 6.10: New Collection The actual references that you can use in your bibliography are the list of titles in the center of the page. You can add a reference manually clicking on the green icon with a white plus and fill-in the fields manually: Figure 6.11: New Item Figure 6.12: Fill-in fields manually Although it is useful to add references manually (e.g. blogposts, websites), the nicest feature of Zotero is its connector with Chrome (and other browsers) that allows you to add references directly from Google Scholar or other websites with referencing information. Once you look for a reference in google scholar, you can right-click on the page and select Save to Zotero, select the document you want to add and click OK, you will see that the document has been added to your collection (right-hand side corner) Figure 6.13: Add reference from Google Scholar Figure 6.14: Add reference from Google Scholar Figure 6.15: Add reference from Google Scholar You can save the references also from other pages that have embedded referencing metadata (this is not always well organized, so probably better to use scholar). Figure 6.16: Add reference from other website Figure 6.17: Add reference from other website The final step in the basic use of Zotero is to add the saved references in your word document. This are the main steps. Open your Word document and click on add citation from the Zotero menu, and the icon Add/Edit Citation on the left-hand side corner: Figure 6.18: Add/Edit citation from Word You will be asked to choose the citation format: Figure 6.19: Choose citation style You can now type the document you want to add (search by author name, title or date-all work): Figure 6.20: Select citation You will see that the citation has been added to your document. The final step is to add your full bibliography. Figure 6.21: Add bibliography from Word This is the final result: Figure 6.22: Citation and bibliography added to document "],["data-visualization-flourish-studio.html", "Chapter 7 Data visualization: Flourish studio 7.1 Sign in 7.2 Get started", " Chapter 7 Data visualization: Flourish studio This chapter presents the data visualization tools used by the PovcalNet team. Flourish studio is a user friendly data visualization platform to create interactive data stories. It creats charts, maps and interactive graphs starting from your data. Flourish offers both a free (Public) and paid service(Personal or Business). All data in the free (Public) version is available to the public. For this reason the PovcalNet team shares a paid account. Important: do not use sensitive or unpublished data in your own free account as anyone with a Flourish account will be able to see it (this applies to data in production or in internal servers available to the team before PovcalNet updates). Here are the credentials for the teams paid account: Email: dmahler@worldbank.org PW: PovcalNet A quick overview of Flourish and how to sign in follows. 7.1 Sign in Follow this link for the Flourish homepage: Figure 7.1: Flourish Homepage Click on SIGN IN and use the credentials for the teams account: Figure 7.2: SIGN IN This is how the teams account looks like: Figure 7.3: Flourish-PovcalNet Account 7.2 Get started To start a new project, Add a new folder and title it with Month/Year+Topic, for example September 2020 COVID. Once you created the folder and opened it, click on New Visualization to create a chart/story/map: Figure 7.4: New Visualization "],["kihoons-handover.html", "A Kihoons Handover A.1 GPWG process A.2 LIS Data Process A.3 LAC Historical data A.4 ECA Historical data", " A Kihoons Handover The documentation below has been directly copied from Kihoons files. A.1 GPWG process Introduction Prior to 2014, PovcalNet team obtained the survey data from regional focal points with the assistance of Minh. Global Poverty Working Group (GPWG) was formed to compile and harmonize the surveys from regional teams. In May 2014, the GPWG database started with ECA (257 surveys) and LAC (242 surveys) regional surveys. In September 2014, EAP (48 surveys) and MNA (16 surveys) were added. In May 2015, SAR (21 surveys) and SSA (107 surveys) regional surveys were added, so that all the 6 regional surveys were compiled for GPWG database. As of 2019, about 1000 survey data from GPWG data are used for the PovcalNet poverty statistics update, which is more than 60% of all data used in the total PovcalNet database. Other sources include those from LIS, EU-SILC high income countries, historical surveys and old grouped data. Since the regional colleagues add or revise the survey data irregularly, it is important to check the database periodically to synchronize the GPWG database and PovcalNet databank. Previously, PovcalNet team updated only surveys that were reported to have been changed or added. But there have been many missing updates and mistakes. Since computer technology became much faster and memory spaces became much larger, I have downloaded all the surveys each time and compared them with previous downloads. In that manner, I was able to log the changes of the database and confirmed that the changes were planned. Many times, the database have been harmonized with mistakes such as year, terms of consumption (annual or monthly). I have reported the problems to the PovcalNet team and Minh so that the mistakes be corrected. From 2017, GPWG decided to exclude negative households from the sample. It was reflected when the data were downloaded. How to download surveys from the GPWG data and generate pcb files Ask Minh to send us the list with the most recent data files in the PRIMUS/datalibweb system. 1.1. Data list received in May 2016 was in p:/Kihoon/Handover/GPWG/Datalib_all_DTAs_20160502-101732.xlsx 1.2. Data list received in April 2017 was in p:/Kihoon/Handover/GPWG/GPWG_latest.dta Using the list, download the all the datasets using datalibweb. Datalibweb is an upgraded program to download the GPWG surveys from July 2018. 2.1. Download using do-file: (p:/Kihoon/Handover/GPWG/Program/GPWG_Get_Data.2019.02.06.do) 2.2. The download is saved in C hard drive and then copied to P drive: p:/Kihoon/Handover/Data/GPWG/AGO2000_dlw.dta 2.3. Each time data is downloaded it is placed in a particular folder according to the date of download. 2.4. Each GPWG file is renamed to CCCYYYYZ_dlw.dta, where CCC refers to the country and YYYY to the year, Z refers to income or consumption if there are multiple welfare sources. This happens in ECA regional countries and Mexico. Using do-file (p:/Kihoon/Handover/GPWG/Program/DLW_All_Summary.do), calculate summary statistics. 3.1. One log file per update. 3.2. results are copied and pasted manually in Excel files (For example, p:/Kihoon/Handover/GPWG/GPWG_All_Summary_2015.06.17.xlsx). 3.3. Generate the differences between the current and the previous updates and report them to Shaohua/Prem.)For example, p:/Kihoon/Handover/GPWG/GPWG_All_Summary_2017.04.11.xlsx) Using do-file (p:/Kihoon/Handover/GPWG/Program/GPWG_All_Text.do) generate text files and place them in P drive: P:/2019/Textfiles/GPWG Prem generates .pcb files using p:/UnitRecordConvertor/unitdataConvertor.exe from there. Note: From 2018, PRIMUS system started to synchronize the two database and to be used to generate PovcalNet statistics directly, currently the GPWG process is not necessary any more. A.2 LIS Data Process Introduction LIS database is harmonized microdata collected from 50 countries in Europe, North America, Latin America, Africa, Asia, and Oceania. Out of the microdata from the 50 countries, the surveys of 7 high income countries were not currently available in the World Bank microdata database. The welfare variable that PovcalNet elected from the 7 high income countries (OHI) is per capita disposable income excluding negative income households. Under the contract for privacy and confidentiality, we do not offer the users original microdata. We generate distributional data from the raw microdata and provide them to the users for poverty simulation. The differences between using raw microdata and using distributional data are negligible. How to download surveys from the LIS data server and generate pcb file Register to the LIS datacenter for LIS data access. Renew the registration annually. 1.1. Password is given by the datacenter. 1.2. My id and password are: kihlee  Send the STATA do program to postbox@lisdatacenter.org 2.1 First 4 lines of the program should be user=kihlee password = project = lis package = stata 2.2. When the World Bank email system was Lotus Notes, there was no problem to send the program with no font changes. But after the email system has been changed to Microsoft Outlook, you have to change the font to text. If not, the LIS server cannot read the program. 2.3. In the menu, go to Format Text and select Aa Plain Text. 2.4. I have copied some programs that I have sent to p:/Kihoon/Handover/OECD and LIS/Programs/. 2.5. Generate 400 bins: p:/Kihoon/Handover/OECD and LIS/Programs/Generating 400 bins 2019.txt 2.6. Education data: p:/Kihoon/Handover/OECD and LIS/Programs/Education in LIS data.txt 2.7. Gini coefficients: p:/Kihoon/Handover/OECD and LIS/Programs/Generating gini coefficient.txt The result will arrive in a few minutes depending on the time of processing and the environment of the LIS datacenter server. There are 8 countries we use in the PovcalNet database. They are not available from other sources than the LIS data. We collect the data for Taiwan but not publish. Australia, Canada, Germany, Israel, Japan, , Republic of Korea, Taiwan,9 U.S.A. As of now 89 LIS data points are available. Compared with last update in August 2018, I found that 15 surveys were either added or revised. Therefore, this time I have generated the text file of the surveys and sent them to Minh. 5.1. Australia 2004, 2014 5.2. Germany 1995, 1998, 2002, 2003, 2005, 2008, 2009, 2012, 2015 5.3. Israel 2010, 2012, 2014, 2016 For some EU countries, EU-SILC data are only available after 2003. The LIS data center has the data for previous years. We use the historical data of the countries when the data are compatible. (Austria, Belgium, Czech Republic, Denmark, Finland, France, Greece, Ireland, Italy, Luxembourg, Netherlands, Norway, Poland, Slovakia, Slovenia, Spain, Sweden, Switzerland, UK) Copy and paste the result to empty Excel file. 7.1. The space in the output file of the result is not the same space in the Microsoft Office. 7.2. You may need to either copy and paste to text editor first and copy and paste again to Excel. Or copy and paste to Excel and when you use text to columns use the output file space as a delimiter. A sample result is in p:/Kihoon/Handover/OECD and LIS/LIS 8 Countries 400 bins and nobs.xlsx. For each survey-year data, copy 400 bins and name it as CCCYYYY.TXT and copy them into p:/2019/Textfiles/LIS in case of 2019 update. Using the LIS data we generate 400 bin data for each country and provide them to Minh and he uploads them to the PRIMUS. 8.1. Some LIS data files include negative income households. Before 2018, we included them but from last year we changed our policy and excluded them from the sample. Zero income households are still included. 8.2. Previously, we used xtile command to generate the 400 bin data file but we use _ebin command written by poverty GP. When there are multiple households with the same welfare indicators, _ebin separate them into bins in the way more evenly than xtile. 8.3. The income reference year is the calendar year for which income data has been collected, which is different from EU-SILC data where the income data is a year before the survey. 8.4. Per Capita Disposable income is selected as a welfare indicator. DHI: disposable household income, which includes total monetary and nonmonetary current income net of income taxes and social security contributions (HI-HXIT) It is important to cross check that the statistics from the original files and those from the 400 bin data do not have a significant difference. Because of the rounding errors, they are not 100% identical but the difference should be very small. A.3 LAC Historical data Kihoon collected data from 1997 to 2000 when he was working with the MECOVI team in LAC PREM. Since 2000, he got the data from Marco Robles in the IDB. These data are placed on Kihoon/Handover/Data/LAC/DX/. According to Kihoon these data do not require permissions of use but it is necessary to coordinate with the LAC team if they agree on make it part of their collection. A.4 ECA Historical data Minh provided EUSILC data. However, the PovcalNet is not allowed to use it directly, so we have to use bin data. From 2003 to now we use the 400-bin data calcualted by Minh. From 2003 backwrds we use 400-bin data calculated using LIS server. The data are placed in this folder Kihoon/Handover/Data/ECA/EUSILC/. In that folder there are regional files (e.g., ECA_2005_EU-SILC-C_v01_M_v05_A_UDB_X.dta) where X might be D, H, P, R (Kihoon is going to find out what D and R mean). He split the regional files into Non-OECD and OECD countries. Even though we collect Taiwan data, we are not allowed to use it. "],["references.html", "References", " References "]]

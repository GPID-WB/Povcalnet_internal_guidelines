[["create-pcb-files.html", "Chapter 10 Create .PCB files 10.1 The povcalnet_update repository 10.2 Generate the .pcb files 10.3 Update the Master file", " Chapter 10 Create .PCB files As explained in the introduction of this part of the book, creating the .PCB files are the last step of the process before uploading everything to the PovcalNet system. The .PCB files are (TO-DO: Ask Tony to provide his inputs for the explanations.) 10.1 The povcalnet_update repository Once you have updated all the sheets in the master filebesides the SurveyMean sheetand have updated the microdata in the P drive, the next step is to create the .pcb files and update the SurveyMean sheet. All of this is done with the PovcalNet-Team/povcalnet_update repository. Make sure you clone the repo and open it as a project in Rstudio. You will find the project has three .R files only. If everything goes as expected, youll only need to use the file 00.master.R. In rare cases, you will need to modify the functions in other two files. The utils.R file has generic functions such as loading the master file into the system, or creating survey IDs. These functions are used all along the process. The process_functions.R file contain functions for specific parts of the projects are executed usually once along the whole process. Basically, the 00.master.R calls these functions in order in the same way that a master do-file call other do-files that do specific things. In this chapter, we break down the 00.master.R file, so you understand how to run it, the logic behind, and what to do in case it needs to be fixed. Lets start by installing the minimum necessary packages. 00.master.R file assumes you already have them installed, so you should run the code below before you start. # pkg_load &lt;- knitr::combine_words(pkgs, before = &quot;`&quot;) pkgs &lt;- c(&quot;janitor&quot;, &quot;data.table&quot;, &quot;tidyverse&quot;, &quot;writexl&quot;, &quot;readxl&quot;, &quot;here&quot;, &quot;devtools&quot;) no_installed &lt;- pkgs[!(pkgs %in% installed.packages())] installed.packages(no_installed) 10.2 Generate the .pcb files 10.2.1 Directories The first section includes the directories in which youre going to be working. As of today (2020-11-20), the datadir directory is for 2020_JUL as it was the last release of PovcalNet. However, make sure you create a new folder with the year and month of the tentative release. 10.2.2 Surveys that have changed Now, we have to specify what countries/years have been added or changed to the PovcalNet repository. We recommend you do this country by country. #--------- to modify in each round --------- countries &lt;- &quot;CHN&quot; years &lt;- NULL If you leave the argument years equal to NULL, the code will update all the years for the country select. In this case, CHN. However, you could specify what years to update for that particular country, like, countries &lt;- &quot;IND&quot; years &lt;- c(1993, 2004, 2009, 2012) It is important to note that unless you want to update all the years available in more than one country, you should not include in the countries variable more than one country. 10.2.3 Prepare metadata In the next part we prepare the data. Function pcn_datafind finds the directory path and filenames of the corresponding countries in variable countries. It returns a list with two objects, fail and pcn. Object fail lets you know if there is any particular data that could not be loaded. Object pcn contains a data frame with the information above. # Find countries tmp &lt;- pcn_datafind(country = countries) pcn_fails &lt;- tmp$fail pcn &lt;- as.data.table(tmp$pcn) # Fix metadata pcn &lt;- fix_metadata(pcn) # Get reference year pcn &lt;- get_ref_year(pcn, cpi_path) Then pcn object is then passed to the fix_metadata function in which some columns like welfare type of survey coverage are added. Finally, function get_ref_year merges the price framework data from datalibweb to assign the right reference year to each survey. Keep in mind that get_ref_year makes some hard-coded adjustments. Check those in case the resulting reference year is incorrect. 10.2.4 Generate .pcb files Now that the metadata is ready, we can create the .pcb file. This is done with this code, # -------------------- Create PCB -------------------- replace_file &lt;- TRUE pcb_status &lt;- generate_pcb_files(df = pcn, countries = countries, years = years, replace_file = replace_file, datadir = datadir The function generate_pcb_files takes the directory paths of the microdata in the pcn object, loads the microdata, and, inside the datadir directory, creates the .pcb file into the /01.pcb/ subdirectory and and .rds file (R readable) into the /02.rds/ sub-directory. The creation of the .rds is for convenience. It allows you to check the data in the .pcb in an easy way. The .pcb file, in contrast, is harder to read directly in R. One feature of the generate_pcb_files functions is that you can add additional filters by country and year in case you need it. By default, notice that it is only until this point that the years objects defined above is being used. In fact, you could create another object, say countries2, and parse it into the argument countries of the generate_pcb_files function. Up to this point, the generation of the .pcb files is concluded, but the PovcalNet system requires two types of inputs, welfare data and the master file. We still need to update the SurveyMean sheet of the Master file. 10.3 Update the Master file Updating the Master file is the most challenging part of the whole process because we need to make sure that, whatever is correct must remain correct. whatever is wrong should be fixed whatever is not necessary should be removed whatever is missing should be added whatever is duplicated must be unified. Thus, we recommend that you run this sections one by one and check the results in between. This is specially important for countries with urban/rural coverage like China, India, or Indonesia; for countries with lagging reference years like EU-SILC countries, or for tricky countries like  (Macedonia?). 10.3.1 Update info of the SurveyMean sheet The first step is to extract some important metadata information from the .rds files generated in the previous step. This is done with the following code, lf &lt;- update_master_info(df = pcn, countries = countries, years = years) st &lt;- lf$s df &lt;- lf$df table(st$status) filter(st, status != &quot;OK&quot;) The object lf is a list with two objects, st and df. Object st is merely the status of each survey in the update_master_info process, whereas df is the actual metadata of the new data. Now, the following code loads the data in the most recent version of the Master file, lmf &lt;- load_masterfile() mf &lt;- lmf$data$SurveyMean reg_ctry &lt;- lmf$data$CountryList %&gt;% select( Region = WBRegionCode, CountryCode = CountryCode, countryName = CountryName ) The function load_masterfile returns a list that is then bound to the name lmf (this function takes a while to run especially if youre working remotely). The main object of lmf is another list, data, that contains the a data frame per sheet. So, in the code above, youre creating object mf with the SurveyMean and red_ctry, with the CountryList sheet. The reason way we load the whole master file is that, when we create a new version we want that version to include all the sheets, even those that were not modified. Function writexl::write_xls, which is the function that saves the new version of the master file, uses a list with all the sheets to save the file. Now, we need to prepare organize the new information into the SurveyMean format. This is done with function survey_mean_info. However, and this one of the tricky parts, we need to make sure that the five objectives above are met when we include the information of the new data. The survey_mean_info function handles all the generic cases, but there are some cases that need to be removed manually. This is why we have the object condition that goes directly as one of the arguments of survey_mean_info. If there is need to manage any especial case, this object should be set to an empty string, condition &lt;- \"\". Lets see some examples of real cases in which we had to use the object condition. condition &lt;- &#39;!(countrycode == &quot;IND&quot; &amp; year == 2012)&#39; In this case, we needed to remove the observation for India 2012, because even though the CPI_Time variable in the master file is 2012, the SurveyTime variable is 2011.5. condition &lt;- &#39;!(countrycode == &quot;CHN&quot; &amp; grepl(&quot;A$&quot;, module))&#39; Here we needed to remove all the observations of China for which the module finished in a letter A. condition &lt;- &#39;!(countrycode == &quot;CHN&quot; &amp; year &gt;= 1990 &amp; welfaretype3 == &quot;y&quot;)&#39; Here, there was a problem in the metadata and we needed to remove all the observations for China after 1990 for which the welfare type was coded as income, when in reality it was consumption. condition &lt;- paste0(&#39;!(countrycode %in% &#39;, deparse(countries), &#39; &amp; year %in% &#39;, deparse(years),&#39;)&#39; ) This final example is a general form in which we remove old observations for all the countries and years for which there is new data. This is very useful if we want to do start a country from scratch. Now, we just need to identify unchanged data in the SurveyMean sheet using the function unchanged_data() and then append together the new data, dfn, and the unchaged data. Finally, we update the Master file using the function update_master_file, which receives for arguments, lmf, the current version of the master file with all its sheets; vintage, the vintage control sheet which is loaded separately and it is useful only for institutional-memory purposes; new_mf, which is the new SurveyMean sheet with unchanged and new data; and mdir, which is the directory of the master file. You should be fine if you execute all these steps one by one, while checking the intermediate outputs. "]]

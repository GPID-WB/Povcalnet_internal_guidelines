[
["index.html", "PovcalNet Internal Guidelines and Protocols Welcome Team", " PovcalNet Internal Guidelines and Protocols PovcalNet team Development economics World Bank Group 2019-10-15 Welcome This book contains the guidelines and protocols of the internal workflow of the PovcalNet team. As part of the PovcalNet team, you’re required to read and understand the material of this book. The intention of this book is to create institutional memory of the PovcalNet. It is intended for internal audiences but may be used as part of the conversation with other teams inside and outside the World Bank Group. Team PovcalNet is a product of the World Bank’s Development Economics Division, in particular the Development Data Group and the Development Research Group, and the Poverty and Equity Global Practice. This version of the PovcalNet software was designed by Qinghua Zhao. The global poverty monitoring database is managed by R. Andrés Castañeda, Dean Jolliffe, Christoph Lakner, Espen B. Prydz and Prem Sangraula, with assistance from Tony Fujs and Kihoon Lee. Assembly of these data is undertaken under the auspices of the Global Poverty Working Group which brings together the PovcalNet team and economy- and regional-level counterparts in the World Bank’s Poverty and Equity Global Practice, and which compiles economy level data and assesses these for international comparability. Overall guidance is provided by Francisco H. G. Ferreira, Senior Advisor in the Poverty and Inequality team of the Research Department, Haishan Fu, Director of the Data Group, and Carolina Sánchez-Páramo, Senior Director of the Poverty and Equity Global Practice. The founder of PovcalNet and former Director of Research, Martin Ravallion, provides continued input on the methodology adopted in PovcalNet. A great many colleagues at the World Bank have helped the team in obtaining the necessary data for PovcalNet. An important acknowledgement goes to the staff of over 100 governmental statistics offices that collected the primary household and price survey data. The Development Data Group has provided the 2011 consumption PPPs, population and other National Accounts data used here. "],
["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction PovcalNet is an interactive computational tool that allows you to replicate the calculations made by the World Bank’s researchers in estimating the extent of absolute poverty in the world. PovcalNet also allows you to calculate the poverty measures under different assumptions and to assemble the estimates using alternative economy groupings or for any set of individual economies of the user’s choosing. PovcalNet is self-contained; it has reliable built-in software that quickly does the relevant calculations for you from the built-in database. In March 2019, the World Bank released revised estimates of global poverty from 1981 to 2015 based on 2011 PPPs. The new poverty estimates combine Purchasing Power Parity (PPP) exchange rates for household consumption from the 2011 International Comparison Program with data from more than one thousand five hundred household surveys across 164 economies in the world, including 26 high income economies not included in PovcalNet’s geographic regions. Over two million randomly sampled households were interviewed for the 2015 estimate, representing 65 percent of the population of the whole world. PovcalNet is the source of, and allows users to replicate, the Bank’s official global, regional and internationally comparable economy level poverty estimates published in the World Development Indicators and the Poverty and Shared Prosperity report. It also provides crucial inputs to the Poverty and Equity Data Portal. If you would like to duplicate the World Bank’s regional poverty estimates please click the first button; or go to the second button to form your own group of economies. PovcalNet uses unit-record data whenever possible. For other cases, grouped distributions are used. New survey data become available to us on a continuous basis and these will be added to PovcalNet in regular updates. PovcalNet was developed for the sole purpose of public replication of the World Bank’s poverty measures for its widely used international poverty lines, including $1.90 a day and $3.20 a day in 2011 PPP. The methods built into PovcalNet are considered reliable for that purpose. However, we cannot be confident that the methods work well for other purposes, including tracing out the entire distribution of income. We would especially warn that estimates of the densities near the bottom and top tails of the distribution could be quite unreliable, and no attempt has been made by the Bank’s staff to validate the tool for such purposes. "],
["folder-strcuture.html", "Chapter 2 Folder Strcuture 2.1 OneDrive 2.2 Network Drive 2.3 Remote server connection 2.4 Additional topics to discuss", " Chapter 2 Folder Strcuture This short note provides everything you need to understand the new folder structure of the PovcalNet workflow, which is suggested with the following objectives in mind: Objectives Share documents (i.e, editable files) among the team members through a stable, friendly, and vintage-control suitable platform. Store vintages of data for replicability purposes Execute, load, and save data uninterruptedly and, if possible, in a fast manner. Unfortunately, the World Bank systems do not provide an ITS service that allows us to meet all the objectives, and thus we are forced to use different platforms. OneDrive for the first objective, a Network drive for the second one, and server (super computer) of remote execution for the third one. 2.1 OneDrive OneDrive has a double storage functionality. On the one hand, each person has been granted with 5TB of memory in a personal folder that is accessible through either the web browser or through the Window Explorer. On the other hand, OneDrive offers shared libraries for collaboration among the members of a private team. The PovcalNet team currently has assigned the library called PovcalNet Data, Systems and Management and it is accessible either through the web browser or through the Microsoft Teams app. In general, the shared library in OneDrive works in the same way as the personal OneDrive folder with the exception that MS Teams automatically creates a folder in the root of the library for each new channel that is added to team. Besides this inconvenience, the suggested folder structure is as follows ## levelName ## 1 wbntpcifs ## 2 °--PovcalNet ## 3 °--TestFolder ## 4 ¦--01.admin ## 5 ¦ ¦--01.Recruitment ## 6 ¦ ¦--02.Funding ## 7 ¦ °--03.Concept_note ## 8 ¦--02.core_team ## 9 ¦ ¦--01.code ## 10 ¦ ¦ ¦--01.packages ## 11 ¦ ¦ ¦ ¦--01.Stata ## 12 ¦ ¦ ¦ ¦--02.R ## 13 ¦ ¦ ¦ ¦--03.Python ## 14 ¦ ¦ ¦ °--04.VB ## 15 ¦ ¦ °--02.routines ## 16 ¦ ¦--02.dashboard ## 17 ¦ ¦--03.PPT ## 18 ¦ °--04.Minutes ## 19 °--03.projects ## 20 ¦--01.Metadata ## 21 ¦ ¦--01.CPI ## 22 ¦ ¦--02.PPP ## 23 ¦ ¦--03.National_accounts ## 24 ¦ °--04.Population ## 25 ¦--02.Nowcasting_error ## 26 ¦ ¦--_aux ## 27 ¦ ¦--01.Data ## 28 ¦ ¦--02.Code ## 29 ¦ ¦--03.Results ## 30 ¦ ¦--04.Writeup ## 31 ¦ °--05.Literature ## 32 ¦--03.The_Real_Value_of_Poverty ## 33 ¦ ¦--_aux ## 34 ¦ ¦--01.Data ## 35 ¦ ¦--02.Code ## 36 ¦ ¦--03.Results ## 37 ¦ ¦--04.Writeup ## 38 ¦ °--05.Literature ## 39 ¦--04.Whats_New_notes ## 40 ¦ ¦--_aux ## 41 ¦ ¦--01.Data ## 42 ¦ ¦--02.Code ## 43 ¦ ¦--03.Results ## 44 ¦ ¦--04.Writeup ## 45 ¦ °--05.Literature ## 46 °--05.Project_X ## 47 ¦--_aux ## 48 ¦--01.Data ## 49 ¦--02.Code ## 50 ¦--03.Results ## 51 ¦--04.Writeup ## 52 °--05.Literature In general, the folder structure is divided by topics according to their functionality. 01.admin, 02.core_team, and 03.projects. Notice that up to the third level in the folder structure, all folders are prefixed with two-digit numbers. This system guarantees that folders will be sorted as they are added and it is useful for navigation when using the keyboard. Also notice that there are no blank spaces in folders names, but rather underscores (_) are used when the name of the folder has two or more words. This is to avoid problems with some systems. 01.admin This folder contains everything related to administrative information. Each subfolder corresponds to a big subtopic such as recruitment, funding, or concept notes. 02.core_team This folder contains information that is common and useful to all the members of the team and intersects two or more functions (or projects). For instance, the Stata and R packages to query the PovcalNet API might be used in many different projects and do not belong to any project besides the production of the packages itself. Thus, four main categories of common information have been added: code, dashboard, PPT, and minutes. 03.projects This folder contains all the analytic projects in which the PovcalNet team participates. By default, each project contains six subfolders, /01.data, /02.Code, /03.results, /04.writeup,/05.Literature, and /_aux, but these structure could be modified by following any of the following examples: example1, example2, or my favorite. 2.2 Network Drive The Network drive would be mainly used to archive data. Currently, it is known as the P drive, but it could be disconnected and remapped by following the steps below. This drive has many folders in its root, but under the new folder structure only two folder would take predominance, 01.Povcalnet and 02.personal. 01.povcalnethas four main subfulders and follow the structure below: ## levelName ## 1 wbntpcifs ## 2 °--PovcalNet ## 3 °--01.PovcalNet ## 4 ¦--00.Master ## 5 ¦ ¦--01.current ## 6 ¦ ¦ °--01.to_upload ## 7 ¦ °--02.vintage ## 8 ¦--01.QA ## 9 ¦--02.Vintage_control ## 10 °--03.Production ## 11 ¦--01.dta ## 12 ¦--02.text ## 13 °--03.pcb /00.Master contains everything related to the master.xlsx file that is uploaded into the PovcalNet system. This file has its own way for proper use and requires a separate explanation. /01.QA is a working folder that is getting constantly modified. /02.Vintage_control contains the historical data of PovcalNet. Eventually, this would be folder accessible through datalibweb. /03.Production is the folder with the current version of the data in the PovcalNet system. 02.personal contains one folder for each member of the team. The name of the folder is the UPI of the user preceded by the the letters ‘wb’. ## levelName ## 1 wbntpcifs ## 2 °--PovcalNet ## 3 °--02.personal ## 4 ¦--wb020687 ## 5 ¦--wb108988 ## 6 ¦--wb372541 ## 7 ¦--wb384996 ## 8 ¦--wb424681 ## 9 ¦--wb499754 ## 10 °--wb548542 2.2.0.1 Steps to map drives In these steps, we disconnect any mapped drive that has previously assigned to letters P, N, or D. Then, we assign to letter D the former P network drive and to letter D the high-speed drive in the server. Open Notepad. Copy and paste the following lines: net use /del E: /Y net use E: \\\\wbgmsddg001\\PovcalNet /PERSISTENT:YES Save it in your desktop as link_drives.bat Close Notepad Double click file link_drives.bat in your desktop. 2.3 Remote server connection The server is a ‘super computer’ with 8 processor and 64GB of RAM memory. All the 2.3.0.1 Steps to connect to the server In order to get access to the remote server, please do the following: Click on Start, type ‘remote’, and click on “Remote Desktop Connection” Type WBGMSDDG001 in the field ‘Computer:’ and click on ‘show options’ Make sure the box ‘Always ask for credentials’ is unchecked Click tab ‘Local Resources’ and make sure boxes ‘Printers’ and ‘Clipboard’ are checked. Then click ‘More…’ Make sure that only boxes ‘(C:)OSDisk’ and ‘Drives that I plug in later’ are checked and then click OK. click connect. Enter your username (i.e., wbXXXXXX) and Windows passphrase, where XXXXXX is your UPI number. Once your in the server, enter again your username and Windows passphrase. You need to execute steps 2 to 7 only once. Next time you login into the server you only need to execute steps 1 and 8. 2.3.0.2 Map Network drive in the server Once you’re in the server, open Window Explorer and go to the path D:\\PovcalNet\\02.core_team\\_aux\\ in which you will see a file called link_NDrive.bat. Double click that file in order to map the PovcalNet network drive in the server. This procedure has to be done only once. After that, the network drive will be always mapped in the server for you. 2.4 Additional topics to discuss 2.4.1 R or Stata or both? 2.4.2 GitHub ss "],
["collaboration-in-git.html", "Chapter 3 Collaboration in Git 3.1 Initial Set up 3.2 Getting to know Git 3.3 Getting to know GitKraken 3.4 Basics of Git", " Chapter 3 Collaboration in Git This chapter presents how to work with Git, GitKraken, and GitHub. In general, Git is a version control system to track changes in text file (e.g., do-files, R scripts, csv, etc) and to share those changes with other people. Git is capable of letting you know whether a binary files (e.g., Word, Excel, PDF, DTA, etc) has changed, but it won’t tell how it changed. To get the most out of Git, programers combin it with GitHub, which is a website that to share code with anybody (including people outsite the World Bank), solicit improvements via pull requests, and track issues. 3.1 Initial Set up Make you follow the step below: Open a GitHub account using your World Bank email account. Here or here. Download GitKraken and install it. You don’t need admin permissions to install it, but do NOT download it in the “downloads” folder. Open GitKraken and sign in using your Github account rather than creating a “gitkraken account.” Make sure you’re using Google Chrome instead of IE. Install GIT (Optional). This step is optional because the two steps above suffice for working with Git. However, if you got into Git and want to do really advance stuff, you need to work with GIT directly. Make sure R and RStudio are installed and updated in your computer. Even though we have not decided whether or not to work with R from now on, Rstudio is great IDE that allows us to do a lot of things including GIT management 3.2 Getting to know Git Git is a Distributed Version Control System. This means that Git is a sysmte to fully clones the project and in its history into any client’s repository or local computer. Every time you save the state of your project (i.e., commit), Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots of the whole project. This ability of taking snapshopts of the projects is what makes Git to any other version control system. Other systems, like Microsoft Word or any other MS softaware, changes are tracked at the file level rather than at the project level. People is able to know how files have changes individually, but they don’t know how those files change with respect to the changes applied to other files of the same project. 3.3 Getting to know GitKraken Even though Git was originally thought to be executed at the command line, there are several GUIs that ease your interaction with Git and get you excited about it. Yet, keep in mind that “most of the GUIs implement only a partial subset of Git functionality for simplicity. If you know how to run the command-line version, you can probably also figure out how to run the GUI version, while the opposite is not necessarily true. Also, while your choice of graphical client is a matter of personal taste, all users will have the command-line tools installed and available.”1 Among the GUIs avialable, we thinkg GitKraken is the best one to get you started. However, if you’re interested on learning Git at the command line, we recommend the book Pro Git by Scott Chacon and Ben Straub, which is available online for free. The best place to learn everything about GitKraken is the GitKraken Support webpage. However, bellow you will finde the most basic things that you need to know about it and, when considered necessary, you will find either reference links for more detailed inforamtion or embeded videos. For instance, the video bellow shows the basics of GitKraken. Figure 3.1: Introduction to GitKraken GItKraken Interface Figure 3.2: GitKraken Interface Figure 3.2 presents the GItKraken interface, which has four main components. The Toolbar shows the most common actions in repositories. In our case, we will focus on pull, push, and branch. The Left reference panel shows properties of your repository. In this panel you can see waht branches are steored in your local computer and which in the cloud (i.e., remote repository). You may use it also to know whether you’re ahead or behind any specific branch. The Commit panel at your right is where files and changes from your working directory are being watched (i.e., tracked). In this panel you may can see whether a particular file has been modified (orange), deleted (red), created (green) or renamed (blue) with respect to the previous commit. Also, you can see the state of your files with in your current commit. That is, you may know whether each file is staged or unstaged. Figure 3.3: color guide for file symbols The commit graph is the core of your repository’s development and a representation of the Directed Acyclic Graph. As explained in the GitKraken documentation, “[e]ach row of the graph represents one commit, and the top is always for the latest changes. An interactive //WIP (Work-In-Progress) node will show if the working directory has changed since the last commit. Branches and tag labels on the left side of the graph are pointers to specific commits, and each vertical column represents a branch currently available on the repository. Columns can intersect through merge commits as shown in the graph legend. As also shown, multiple branches can be at the same place of a single commit and can be both local and remote.” Figure 3.4: Nodes meaning 3.4 Basics of Git 3.4.1 Working with repositories Create a repository In Git, a repository refers to a folder with all the files and sub-folders of a project. In other words, it refers to the folder of a project. It is possible to create a git repository in an existing project folder, but it is recommended to intialize a Git repository before you start working on your project. Open GitKraken and click on the folder icon at the upper-left side of the screen and then click Init. Alternatively, you coul go to file -&gt; Init repo, or use the shortcut Ctrl + I. Given that we are going to be working with GitHub, click on the icon GitHub.com. Select your account in case you have more than one GitHub account. Provide a name for your repository. The name cannot have spaces. If you want, add a description of the project. Select Public or Private repository. Keep in mind that if you have a free GitHub account: You can have unlimited public repositories with unlimited collaborators. You can have unlimited private repositories with no more than three collaborators. This is very inconvinient for large teams like PovcalNet. Check the box Clone after init Select the folder in your computer where you want to clone the repository. Make you do NOT create a folder for the repositoy because Git will created for you using the name provided in step 2.2. You only need provide the root folder. Do not do anything on the field Full Path. It is just for your information. Do not select anything on .gitignore yet. We wil cover that below. If you are creating a package or a document that must be cited if used, select MIT license leave unchecked the box initialize with LFS Your screen should look something like this: Figure 3.5: Initialize repo Once you have create your repository, make sure to open it and initialize it. Clonning a repository If you want to contribute in an existing repository, you can do it as an existing collaborator or as an external user. If you’re an existing collaborator, you can create branches, commit and push your work into the main repository. If the repository is hosted in a free Github account, you are even able to merge your branch into the master branch. However, if the repository is paid (PRO) license in GitHub, the owner of the account may set restrictions to collaborators and branches. In the second case, if your are an external user of the repository, you can’t push your work into the original respotory but your can fork it (which is making a copy of the repository into your account), modify it as you consider necessary and make a pull request. In order to contribute into any of the PovcalNet repositories you must be an existing collaborator. Thus, in this section you will learn how to clone a repository. Go the to the repository you want clone in GitHub. Clik on the green button “Clone or download” and copy the whole url. Figure 3.6: GitHub link to clone repo Go to GitKraken and click on the folder icon at the upper-left side of the screen and then click clone. Alternatively, you coul go to file -&gt; Clone repo, or use the shortcut Ctrl + N. Select the Github.com icon Select the folder where the repository is going to be cloned Select the repository from the menu. Figure 3.7: Clone repo in GitKraken 3.4.2 Working with commits A commit is a snapshot of your project but, as you work on it, you’re able to decide how the snapshot would look like. You can select what parts or files of your progress will be commited (or snapshoted) and even select what file are not going to be tracked in your progress. All of this is done as follows: Once your files have been modified (Fig. 3.4) and saved, GitKraken identifies them as work in progress (//WIP) and shows you the details in the Unstaged file box. Figure 3.8: GitKraken Work In Progress By clinking in the name of any file in the commit panel (Fig. (fig:GKinterface)), the commit graph will be replace by the GitKraken diffs interface which shows what was added or removed from a file. Red is for lines where content was removed whereas green is for new lines added. You can select [1] all the files, [2] some of the files, or [3] even some hunks within each file to be stage. Your select will compose the next commit. If you decide you don’t want make a staged file part of your next commit, you can unstage it. Record your commit message for the staged files to the repository. In Summary you include a brief but meaningful message supporting your commit. This text will appear in the graph and is mandatory. In Description you may add extended message to provide more details behind the changes. Click Commit changes You may repeat this process as many times you want. When you’re ready, you may push your work to the remote repository into your own branch. 3.4.3 Branching and Merging Branching and merging are the core of collaborating with multiple people. Branches are used to develop features isolated from each other. The master branch is the “default” branch when you create a repository. Use other branches for development and merge them back to the master branch upon completion. “Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug—no matter how big or how small—you spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your future’s history before merging it into the main branch.”2 Even though there are only three types of grouped data, they are labeled type 1, type 2, and type5↩ Atlassian, “Git Branch | Atlassian Git Tutorial” Atlassian, accessed June 3, 2019, link.↩ "],
["DMGroupData.html", "Chapter 4 Upload Group Data to the Data Management System 4.1 Preparing the data", " Chapter 4 Upload Group Data to the Data Management System Server: (http://wbgmsrech001/povcalnet/DB_Management.aspx) Given that anyone may have access to the Data Base Management Syste, the username and password are not provided in this document. 4.1 Preparing the data Once the Group Data is received from the regional focal point of the Poverty GP, It has to be copied and pasted into a text file. Two columns of data must be pasted into the text file; one for weight and one for welfare, which may come in three different varieties and are clearly explain the Povcalnet Website. For the case of China 2016, which is the database used as example in this text, data comes in type 5 format,3 which means that the weight variable is the share of the population in a given quantile and the welfare variable is the mean of welfare therein. If the data comes broken down by urban and rural population, it is necessary to create one text file for each distribution. 4.1.1 Naming convention Text files must be saved with the following naming convention, ccccgXX.T0F, where the only literal piece of the naming convention is T0. All the other are as follows, cccc refers to the name of the country g refers to the geographic area: r for rural, u for urban, and n for national XX stands for the last two digits of the corresponding year of the survey. For example, if the year is 2016, then XX would be 16. F refers to the type formatting of the data. In the case of China 2016 it would be 5. Even though there are only three types of grouped data, they are labeled type 1, type 2, and type5↩ "],
["kihoons-handover.html", "A Kihoon’s Handover A.1 GPWG process A.2 LIS Data Process A.3 LAC Historical data A.4 ECA Historical data", " A Kihoon’s Handover The documentation below has been directly copied from Kihoon’s files. A.1 GPWG process Introduction Prior to 2014, PovcalNet team obtained the survey data from regional focal points with the assistance of Minh. Global Poverty Working Group (GPWG) was formed to compile and harmonize the surveys from regional teams. In May 2014, the GPWG database started with ECA (257 surveys) and LAC (242 surveys) regional surveys. In September 2014, EAP (48 surveys) and MNA (16 surveys) were added. In May 2015, SAR (21 surveys) and SSA (107 surveys) regional surveys were added, so that all the 6 regional surveys were compiled for GPWG database. As of 2019, about 1000 survey data from GPWG data are used for the PovcalNet poverty statistics update, which is more than 60% of all data used in the total PovcalNet database. Other sources include those from LIS, EU-SILC high income countries, historical surveys and old grouped data. Since the regional colleagues add or revise the survey data irregularly, it is important to check the database periodically to synchronize the GPWG database and PovcalNet databank. Previously, PovcalNet team updated only surveys that were reported to have been changed or added. But there have been many missing updates and mistakes. Since computer technology became much faster and memory spaces became much larger, I have downloaded all the surveys each time and compared them with previous downloads. In that manner, I was able to log the changes of the database and confirmed that the changes were planned. Many times, the database have been harmonized with mistakes such as year, terms of consumption (annual or monthly). I have reported the problems to the PovcalNet team and Minh so that the mistakes be corrected. From 2017, GPWG decided to exclude negative households from the sample. It was reflected when the data were downloaded. How to download surveys from the GPWG data and generate pcb files Ask Minh to send us the list with the most recent data files in the PRIMUS/datalibweb system. 1.1. Data list received in May 2016 was in “p:/Kihoon/Handover/GPWG/Datalib_all_DTAs_20160502-101732.xlsx” 1.2. Data list received in April 2017 was in “p:/Kihoon/Handover/GPWG/GPWG_latest.dta” Using the list, download the all the datasets using datalibweb. Datalibweb is an upgraded program to download the GPWG surveys from July 2018. 2.1. Download using do-file: (p:/Kihoon/Handover/GPWG/Program/GPWG_Get_Data.2019.02.06.do) 2.2. The download is saved in C hard drive and then copied to P drive: p:/Kihoon/Handover/Data/GPWG/AGO2000_dlw.dta 2.3. Each time data is downloaded it is placed in a particular folder according to the date of download. 2.4. Each GPWG file is renamed to CCCYYYYZ_dlw.dta, where CCC refers to the country and YYYY to the year, Z refers to income or consumption if there are multiple welfare sources. This happens in ECA regional countries and Mexico. Using do-file (p:/Kihoon/Handover/GPWG/Program/DLW_All_Summary.do), calculate summary statistics. 3.1. One log file per update. 3.2. results are copied and pasted manually in Excel files (For example, p:/Kihoon/Handover/GPWG/GPWG_All_Summary_2015.06.17.xlsx). 3.3. Generate the differences between the current and the previous updates and report them to Shaohua/Prem.)For example, p:/Kihoon/Handover/GPWG/GPWG_All_Summary_2017.04.11.xlsx) Using do-file (p:/Kihoon/Handover/GPWG/Program/GPWG_All_Text.do) generate text files and place them in P drive: P:/2019/Textfiles/GPWG Prem generates .pcb files using “p:/UnitRecordConvertor/unitdataConvertor.exe” from there. Note: From 2018, PRIMUS system started to synchronize the two database and to be used to generate PovcalNet statistics directly, currently the GPWG process is not necessary any more. A.2 LIS Data Process Introduction LIS database is harmonized microdata collected from 50 countries in Europe, North America, Latin America, Africa, Asia, and Oceania. Out of the microdata from the 50 countries, the surveys of 7 high income countries were not currently available in the World Bank microdata database. The welfare variable that PovcalNet elected from the 7 high income countries (OHI) is per capita disposable income excluding negative income households. Under the contract for privacy and confidentiality, we do not offer the users original microdata. We generate distributional data from the raw microdata and provide them to the users for poverty simulation. The differences between using raw microdata and using distributional data are negligible. How to download surveys from the LIS data server and generate pcb file Register to the LIS datacenter for LIS data access. Renew the registration annually. 1.1. Password is given by the datacenter. 1.2. My id and password are: “kihlee” … Send the STATA do program to postbox@lisdatacenter.org 2.1 First 4 lines of the program should be user=kihlee password = project = lis package = stata 2.2. When the World Bank email system was Lotus Notes, there was no problem to send the program with no font changes. But after the email system has been changed to Microsoft Outlook, you have to change the font to “text”. If not, the LIS server cannot read the program. 2.3. In the menu, go to “Format Text” and select “Aa Plain Text”. 2.4. I have copied some programs that I have sent to “p:/Kihoon/Handover/OECD and LIS/Programs/”. 2.5. Generate 400 bins: “p:/Kihoon/Handover/OECD and LIS/Programs/Generating 400 bins 2019.txt” 2.6. Education data: “p:/Kihoon/Handover/OECD and LIS/Programs/Education in LIS data.txt” 2.7. Gini coefficients: “p:/Kihoon/Handover/OECD and LIS/Programs/Generating gini coefficient.txt” The result will arrive in a few minutes depending on the time of processing and the environment of the LIS datacenter server. There are 8 countries we use in the PovcalNet database. They are not available from other sources than the LIS data. We collect the data for Taiwan but not publish. Australia, Canada, Germany, Israel, Japan, , Republic of Korea, Taiwan,4 U.S.A. As of now 89 LIS data points are available. Compared with last update in August 2018, I found that 15 surveys were either added or revised. Therefore, this time I have generated the text file of the surveys and sent them to Minh. 5.1. Australia 2004, 2014 5.2. Germany 1995, 1998, 2002, 2003, 2005, 2008, 2009, 2012, 2015 5.3. Israel 2010, 2012, 2014, 2016 For some EU countries, EU-SILC data are only available after 2003. The LIS data center has the data for previous years. We use the historical data of the countries when the data are compatible. (Austria, Belgium, Czech Republic, Denmark, Finland, France, Greece, Ireland, Italy, Luxembourg, Netherlands, Norway, Poland, Slovakia, Slovenia, Spain, Sweden, Switzerland, UK) Copy and paste the result to empty Excel file. 7.1. The space in the output file of the result is not the same space in the Microsoft Office. 7.2. You may need to either copy and paste to text editor first and copy and paste again to Excel. Or copy and paste to Excel and when you use “text to columns” use the output file space as a delimiter. A sample result is in “p:/Kihoon/Handover/OECD and LIS/LIS 8 Countries 400 bins and nobs.xlsx”. For each survey-year data, copy 400 bins and name it as CCCYYYY.TXT and copy them into “p:/2019/Textfiles/LIS” in case of 2019 update. Using the LIS data we generate 400 bin data for each country and provide them to Minh and he uploads them to the PRIMUS. 8.1. Some LIS data files include negative income households. Before 2018, we included them but from last year we changed our policy and excluded them from the sample. Zero income households are still included. 8.2. Previously, we used xtile command to generate the 400 bin data file but we use _ebin command written by poverty GP. When there are multiple households with the same welfare indicators, _ebin separate them into bins in the way more evenly than xtile. 8.3. The income reference year is the calendar year for which income data has been collected, which is different from EU-SILC data where the income data is a year before the survey. 8.4. Per Capita Disposable income is selected as a welfare indicator. DHI: disposable household income, which includes total monetary and nonmonetary current income net of income taxes and social security contributions (HI-HXIT) It is important to cross check that the statistics from the original files and those from the 400 bin data do not have a significant difference. Because of the rounding errors, they are not 100% identical but the difference should be very small. A.3 LAC Historical data Kihoon collected data from 1997 to 2000 when he was working with the MECOVI team in LAC PREM. Since 2000, he got the data from Marco Robles in the IDB. These data are placed on Kihoon/Handover/Data/LAC/DX/. According to Kihoon these data do not require permissions of use but it is necessary to coordinate with the LAC team if they agree on make it part of their collection. A.4 ECA Historical data Minh provided EUSILC data. However, the PovcalNet is not allowed to use it directly, so we have to use bin data. From 2003 to now we use the 400-bin data calcualted by Minh. From 2003 backwrds we use 400-bin data calculated using LIS server. The data are placed in this folder Kihoon/Handover/Data/ECA/EUSILC/. In that folder there are regional files (e.g., ECA_2005_EU-SILC-C_v01_M_v05_A_UDB_X.dta) where X might be D, H, P, R (Kihoon is going to find out what D and R mean). He split the regional files into Non-OECD and OECD countries. Even though we collect Taiwan data, we are not allowed to use it.↩ "],
["references.html", "References", " References "]
]
